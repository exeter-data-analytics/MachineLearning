install.packages("reticulate")
# Setup Python environment
library(reticulate)
use_python('/Applications/anaconda/bin/python')
knitr::opts_chunk$set(echo=TRUE, comment=NA)
library(knitr)
blogdown:::serve_site()
install.packages("multCode")
use_python('/Applications/anaconda/bin/python')
use_python('/Applications/anaconda3/bin/python')
use_python('/Applications/anaconda3/bin/python3.7')
py_discover_config()
n
use_python('/anaconda3/bin/python3.7')
py_discover_config()
getwd()
install.packages("Rtsne")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("C50")
### K-means
# Fit k-means model
set.seed(3)
mdl <- train(x=xTrain, y=yTrain,
method='rf',
ntree=200,
tuneGrid=data.frame(mtry=2))
library(caret
)
library(caret)
mdl <- train(x=xTrain, y=yTrain,
method='rf',
ntree=200,
tuneGrid=data.frame(mtry=2))
remove.packages("caret")
library(caret)
install.packages("caret")
library(caret)
install.packages("rlang")
install.packages("rlang")
library(caret)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(rlang)
library(caret)
mdl <- train(x=xTrain, y=yTrain,
method='rf',
ntree=200,
tuneGrid=data.frame(mtry=2))
library(caret)
install.packages("randomForest")
library(randomForest)
install.packages("kernlab")
install.packages("e1071")
library(e1071)
library(kernlab)
install.packages("kernlab")
remove.packages("kernlab")
install.packages("kernlab")
install.packages("kernlab")
install.packages(/Users/cmy203/Downloads/kernlab_0.9-29.tar.gz, repos = NULL, type="source")
install.packages("/Users/cmy203/Downloads/kernlab_0.9-29.tar.gz", repos = NULL, type="source")
lib.paths()
remove.packages("kernlab")
remove.packages("kernlab")
install.packages("kernlab")
install.packages("https://cran.r-project.org/src/contrib/kernlab_0.9-29.tar.gz")
install.packages("kernlab")
library(kernlab)
library(caret)
install.packages(c("BH", "blogdown", "bookdown", "callr", "class", "cli", "crosstalk", "curl", "DBI", "digest", "e1071", "fansi", "foreign", "ggplot2", "glue", "hms", "jsonlite", "knitr", "lattice", "manipulateWidget", "mime", "nlme", "nnet", "pillar", "plyr", "prettyunits", "processx", "ps", "R6", "raster", "Rcpp", "rgdal", "rgl", "rmarkdown", "rstudioapi", "scales", "servr", "sf", "shiny", "sp", "stringi", "survival", "tinytex", "units", "webshot", "xfun", "yaml"))
install.packages(c("BH", "blogdown", "bookdown", "callr", "class", "cli", "crosstalk", "curl", "DBI", "digest", "e1071", "fansi", "foreign", "ggplot2", "glue", "hms", "jsonlite", "knitr", "lattice", "manipulateWidget", "mime", "nlme", "nnet", "pillar", "plyr", "prettyunits", "processx", "ps", "R6", "raster", "Rcpp", "rgdal", "rgl", "rmarkdown", "rstudioapi", "scales", "servr", "sf", "shiny", "sp", "stringi", "survival", "tinytex", "units", "webshot", "xfun", "yaml"))
install.packages(c("BH", "blogdown", "bookdown", "callr", "class", "cli", "crosstalk", "curl", "DBI", "digest", "e1071", "fansi", "foreign", "ggplot2", "glue", "hms", "jsonlite", "knitr", "lattice", "manipulateWidget", "mime", "nlme", "nnet", "pillar", "plyr", "prettyunits", "processx", "ps", "R6", "raster", "Rcpp", "rgdal", "rgl", "rmarkdown", "rstudioapi", "scales", "servr", "sf", "shiny", "sp", "stringi", "survival", "tinytex", "units", "webshot", "xfun", "yaml"))
install.packages("kernlab")
install.packages("https://cran.r-project.org/src/contrib/kernlab_0.9-29.tar.gz")
library(e1071)
library(kernlab)
library(reticulate)
use_python('anaconda3/bin/python3.7')
use_python('/anaconda3/bin/python3.7')
py_discover_config()
install.packages("kernlab")
# Split test/train
set.seed(103) # for reproducibility
ii <- createDataPartition(iris[, 5], p=.7, list=F) ## returns indices for train data
library(caret)
# Split test/train
set.seed(103) # for reproducibility
ii <- createDataPartition(iris[, 5], p=.7, list=F) ## returns indices for train data
xTrain <- iris[ii, 1:4]; yTrain <- iris[ii, 5]
xTest <- iris[-ii, 1:4]; yTest <- iris[-ii, 5]
dim(xTrain)
dim(xTest)
# Set training options
# Repeat 5-fold cross-validation, ten times
opts <- trainControl(method='repeatedcv', number=5, repeats=10, p=0.7)
# Fit SVM
set.seed(1040) # for reproducibility
mdl <- train(x=xTrain, y=yTrain,            # training data
method='svmLinear',            # machine learning model
trControl=opts,                # training options
tuneGrid=data.frame(C=c(0.01, 1, 10, 100, 1000))) # range of C's to try
print(mdl)
library(reticulate)
py_discover_config()
use_python('/anaconda3/bin/python3.7')
py_discover_config()
IMG <- "_img/" # image path
file.path(IMG, "03-pca02.png"
file.path(IMG, "03-pca02.png")
file.path(IMG, "03-pca02.png")
library(reticulate)
use_python('anaconda3/bin/python3.7')
use_python('/anaconda3/bin/python3.7')
py_discover_config()
